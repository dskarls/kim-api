#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2021, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


The kim-api git repository comes with a set of git-hooks that should be enabled
once the repo has been cloned locally.  A script is provided to do just this:

$ ./scripts/configure-git-repo-hooks-etc


Seven other scripts are provided:

* ci-build-and-test

  This script executes a number of build and install scenarios and is used by
  the CI.

* ci-docker-build-and-run

  This script is used by the CI to set up a docker build and then execute the
  ci-build-and-test within the specific docker environment.

* clang-format-all

  This script will format all the c/c++ code in the repo using the clang-format
  utility.  clang-format is assumed to be installed on the system and in the
  path.  The ./git-hooks/pre-commit hook also depends on the availability of
  clang-format.

* create-package

  This script is only for use by the package maintainer and is used to generate
  a release commit and the corresponding official release tarball.

* format-all

  This script will format all the c/c++ and fortran code in the repo by calling
  the clang-foramt-all and fprettify-all scripts.

* fprettify-all

  This script will format all the fortran code in the repo using the
  fprettify utility.  fprettify is assumed to be installed on the system
  and in the path.  The ./git-hooks/pre-commit hook also depends on the
  availability of fprettify.

* run-cmds-from-install

  This script extracts commands from the INSTALL file and executes them.  The
  script is used by CI and for testing.


Branches:

* There are two official branches (see below), all other branches are transient
  and may be rewritten at any time.

  - "master" This branch always points to the most recent official release.

  - "devel" This branch points to the latest development commits.  It is not
    guaranteed to be buildable.  Pull requests should be based off this branch.


Tags:

* There are two tag name conventions in use.

  - "vX.Y.Z" These tags point to the final release commit version of the
    release.  These tags show up in the history (git log) of the "master"
    branch, but not of the "devel" branch.

  - "vX.Y.Z-git" These tags point to the final commit version of the release,
    before the create-package script is executed to generate the release
    commit.  These tags show up in the history (git log) of the "devel" branch.
